#How can you use treeview in your web application

= Introduction =

This highly-interactive tree-view is very simple to reuse. All that is required is to include the required JavaScript files, the address of an input XML file with the appropriate schema, an empty canvas element inside an arbitrary HTML page, and make a call to the displayTree() method. For instance, the following complete HTML page displays the tree seen below:

{{{
<html>
<head>
<script type="text/javascript" src="lib/processing.js"></script>
<script type="text/javascript" src="lib/treeview.js"></script>
</head>

<body onload="displayTree('data.xml', window.innerWidth-200, window.innerHeight-200)">
	<canvas id="canvas"></canvas>
</body>
</html>
}}}

Because this interaction is entirely JavaScript based, essentially any existing web framework ranging from other JavaScript libraries to full web application frameworks such as Rails can use it right out of the box. We also provide customization arguments to the displayTree() function. 


= API Reference =

==Tree==
===displayTree===
===isExpanded===
===setIsExpanded===

==Canvas==
===getCanvasWidth===
===setCanvasWidth===
===getCanvasHeight===
===setCanvasHeight===
===getCanvasColor===
===setCanvasColor===


==Font==
===getFontColor===
===setFontColor===
===getNodeFontType===
===setNodeFontType===

==Node==
===getNodeWidth===
===setNodeWidth===
===getNodeHeight===
===setNodeHeight===
===getNodeColor===
===setNodeColor===
===getHoverColor===
===setHoverColor===
===getActiveColor===
===setActiveColor===
===getSelectedColor===
===setSelectedColor===
===getLineColor===
===setLineColor===
===hasBorder===
===setHasBorder===
===getBorderColor===
===setBorderColor===



